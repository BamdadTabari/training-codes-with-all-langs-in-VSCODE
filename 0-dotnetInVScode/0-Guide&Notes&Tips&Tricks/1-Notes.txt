
Good Practice:
Comments should not be the only way that you document your code. 
Choosing sensible names for variables and functions, writing unit tests, and creating actual 
documents are other ways to document your code

------------------------------------------------------------------

themes change in vscode: ctrl+K ctrl+t

In Visual Studio 2022:
1. Navigate to Tools | Options.
2. In the Options dialog box, in the Environment section, select Fonts and Colors, and then 
select the display items that you would like to customize. You can also search for the section 
instead of browsing for it.

------------------------------------------------------------------
WHICH SDK? WHICH NAME SPACE? (C#)

- Microsoft.NET.Sdk:
    System
    System.Collections.Generic
    System.IO
    System.Linq
    System.Net.Http
    System.Threading
    System.Threading.Tasks

- Microsoft.NET.Sdk.Web:
    Same as Microsoft.NET.Sdk and:
    System.Net.Http.Json
    Microsoft.AspNetCore.Builder
    Microsoft.AspNetCore.Hosting
    Microsoft.AspNetCore.Http
    Microsoft.AspNetCore.Routing
    Microsoft.Extensions.Configuration
    Microsoft.Extensions.DependencyInjection
    Microsoft.Extensions.Hosting
    Microsoft.Extensions.Logging

- Microsoft.NET.Sdk.Worker:
    Same as Microsoft.NET.Sdk and:
    Microsoft.Extensions.Configuration
    Microsoft.Extensions.DependencyInjection
    Microsoft.Extensions.Hosting
    Microsoft.Extensions.Logging
------------------------------------------------------------------

HOW TO ADD OR REMOVE(DEFAULT) GLOBAL NAME SPACES:

CLICK ON YOUR .SCPROJ FILE, THEN LIKE THIS=>

 <ItemGroup>
    <Using Remove="System.Threading" />
    <Using Include="System.Numerics" />
    <Using Include="System.Console" Static="true" />
    <Using Include="System.Environment" Alias="Env" />
</ItemGroup>
------------------------------------------------------------------
You can disable the implicitly imported namespaces feature for all SDKs by removing the 
<ImplicitUsings> element completely from the project file, or changing its value to disable, as 
shown in the following markup:
<ImplicitUsings>disable</ImplicitUsings>
------------------------------------------------------------------
Good Practice: You might choose to do this if you want to manually create a single file 
with all the global using statements instead of potentially having one generated automatically and others created manually. 
But my recommendation is to leave the feature 
enabled and modify the project file to change what is included in the auto-generated class 
file in the obj folder hierarchy.
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------
------------------------------------------------------------------