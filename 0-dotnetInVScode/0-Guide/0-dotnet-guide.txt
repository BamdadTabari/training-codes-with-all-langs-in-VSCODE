for building a dotnet app in vscode:

1. we should build a solution first

2. then build our app

sample: console app=>
 - command 1 : dotnet new sln --name "the name of the solution"
 - command 2 : dotnet new console --output "the name of app"
 - command 3 : dotnet sln add "the name of app"

 ----------------------------------------------------------

 To build different types of .NET projects in Visual Studio Code, 
 you can use various commands provided by the .NET CLI and C# Dev Kit extension. 
 Here is a list of essential commands for building .NET projects:

1. **dotnet build**: This command builds a project or solution.
2. **dotnet clean**: Cleans all solution outputs.
3. **dotnet run**: Runs the application from source.
4. **dotnet restore**: Restores the dependencies for an application.
5. **dotnet publish**: Publishes a .NET framework-dependent or self-contained application.

These commands are essential for managing and building your .NET projects efficiently 
in Visual Studio Code.

----------------------------------------------------------------------


Ok, to create different types of .NET applications using Visual Studio Code,
you can use the `dotnet new` command with specific templates. 
The following are some common templates that you can use to generate different types of 
.NET applications:

1. **Console Application (console)**: Creates a basic console application.
2. **Web API (webapi)**: Generates a web API project.
3. **Blazor WebAssembly App (blazorwasm)**: Produces a Blazor WebAssembly app.
4. **MVC WebApp (mvc)**: Creates a MVC web application.
5. **Class Library (classlib)**: Builds a class library.
6. **Unit Test Project (xunit)**: Generates a unit test project.
7. **ASP.NET Core Empty (empty)**: Creates an empty ASP.NET Core project.
8. **Razor Class Library (razor)**: Produces a Razor class library.
9. **Static Website (static)**: Generates a static website.
10. **Workflow Console App (workflow)**: Creates a workflow console application.
||| dotnet new 
console 
classlib 
xunit
web
razorclasslib
mvc
webapi
webapiaot =>ASP.NET Core Web API  (native AOT)
blazor

You can specify the output directory when creating these applications using the `--output` flag followed by the desired folder path. For example, if you want to create a Blazor WebAssembly app named 'MyProject' in the 'C:\projects\myproject\' directory, you would use the following command:

```bash
dotnet new blazorwasm -o C:\projects\myproject\MyProject
```

This will create a new Blazor WebAssembly app named 'MyProject' in the specified directory.

------------------------------------------------------

note: see this =>
dotnet new console -o AboutMyEnvironment --use-program-main
=> this bitch "--use-program-main" will disable top-level-statement

-------------------------------------------------------

note: "dotnet" commant output =>
Usage: dotnet [options]
Usage: dotnet [path-to-application]

Options:
  -h|--help         Display help.
  --info            Display .NET information.
  --list-sdks       Display the installed SDKs.
  --list-runtimes   Display the installed runtimes.

path-to-application:
  The path to an application .dll file to execute.

---------------------------------------------------------

note: "dotnet -h" command output

Usage: dotnet [runtime-options] [path-to-application] [arguments]

Execute a .NET application.

runtime-options:
  --additionalprobingpath <path>   Path containing probing policy and assemblies to probe for.
  --additional-deps <path>         Path to additional deps.json file.
  --depsfile                       Path to <application>.deps.json file.
  --fx-version <version>           Version of the installed Shared Framework to use to run the application.
  --roll-forward <setting>         Roll forward to framework version  (LatestPatch, Minor, LatestMinor, Major, LatestMajor, Disable).
  --runtimeconfig                  Path to <application>.runtimeconfig.json file.

path-to-application:
  The path to an application .dll file to execute.

Usage: dotnet [sdk-options] [command] [command-options] [arguments]

Execute a .NET SDK command.

sdk-options:
  -d|--diagnostics  Enable diagnostic output.
  -h|--help         Show command line help.
  --info            Display .NET information.
  --list-runtimes   Display the installed runtimes.
  --list-sdks       Display the installed SDKs.
  --version         Display .NET SDK version in use.

SDK commands:
  add               Add a package or reference to a .NET project.
  build             Build a .NET project.
  build-server      Interact with servers started by a build.
  clean             Clean build outputs of a .NET project.
  format            Apply style preferences to a project or solution.
  help              Show command line help.
  list              List project references of a .NET project.
  msbuild           Run Microsoft Build Engine (MSBuild) commands.
  new               Create a new .NET project or file.
  nuget             Provides additional NuGet commands.
  pack              Create a NuGet package.
  publish           Publish a .NET project for deployment.
  remove            Remove a package or reference from a .NET project.
  restore           Restore dependencies specified in a .NET project.
  run               Build and run a .NET project output.
  sdk               Manage .NET SDK installation.
  sln               Modify Visual Studio solution files.
  store             Store the specified assemblies in the runtime package store.
  test              Run unit tests using the test runner specified in a .NET project.
  tool              Install or manage tools that extend the .NET experience.
  vstest            Run Microsoft Test Engine (VSTest) commands.
  workload          Manage optional workloads.

Additional commands from bundled tools:
  dev-certs         Create and manage development certificates.
  fsi               Start F# Interactive / execute F# scripts.
  user-jwts         Manage JSON Web Tokens in development.
  user-secrets      Manage development user secrets.
  watch             Start a file watcher that runs a command when files change.

Run 'dotnet [command] --help' for more information on a command.

--------------------------------------------------------------------------
Another type of help is command-line documentation. It follows this syntax:
dotnet <command> -h|--help
For example, dotnet new -? or dotnet new -h or dotnet new --help outputs documentation about 
the new command at the command prompt.

sample : dotnet build -h
--------------------------------------------------------------------------


--------------------------------------------------------------------------